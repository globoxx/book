(prog1.conditions)=

# Les structures conditionnelles

[M√©mento Python](https://perso.limsi.fr/pointal/_media/python:cours:mementopython3.pdf)  
[Raccourcis clavier](https://support.apple.com/fr-ch/HT201236)

Les structures de contr√¥le sont un √©l√©ment central de la programmation.
**Elles permettent de moduler l‚Äôex√©cution d'un programme selon la valeur de ses variables**.  
Gr√¢ce aux structures conditionnelles, la complexit√© de vos programmes va pouvoir √™tre d√©cupl√©e ! ü§Ø  
Les structures de contr√¥le se retrouvent de fa√ßon presque identique dans tous les autres langages de programmation.

## L'instruction if

L‚Äôinstruction `if` (si, en anglais) permet d‚Äô**effectuer une liste d‚Äôinstructions uniquement si une valeur bool√©enne (appel√©e la condition) est True (vraie)**.

```{codeplay}
ok = True
if ok:
	print("la variable ok est vraie")
else:
	print("la variable ok est fausse")
```

Dans l‚Äôexemple ci-dessus, on d√©finit la variable bool√©enne `ok` √† True (vrai).
L‚Äôinstruction `if` teste cette variable.

* Si elle est vraie, le bloc d‚Äôinstructions (d√©cal√© √† droite) qui vient apr√®s les deux points est ex√©cut√©. 
* Sinon, le bloc `else` (sinon, en fran√ßais) est ex√©cut√© √† la place.  

‚ö†Ô∏è Notez que le bloc `else` n'est pas obligatoire. ‚ö†Ô∏è

**L‚Äôindentation du texte (le d√©calage √† droite) est importante**.
Elle permet √† l‚Äôordinateur de savoir quelles sont les instructions qui appartiennent au bloc du `if` et quelles sont celles qui appartiennent au bloc du `else`.  
(L'indentation se fait de pr√©f√©rence avec la touche tabulation (**TAB**) du clavier.)

```{admonition} Exercice
:class: note
Ecrivez un programme qui demande son √¢ge √† l‚Äôutilisateur. 
Si l‚Äôutilisateur donne un nombre inf√©rieur √† 20, le programme √©crit "Comme vous √™tes jeune !", sinon il √©crit "Comme vous √™tes vieux !".
```

`````{admonition} Solution
:class: hint
````{dropdown} <span style="color:grey">Cliquer ici pour voir la r√©ponse</span>
:animate: fade-in-slide-down
```{codeplay}
:file: au_revoir.py
age = int(input("Entrez votre age: "))

if age < 20:
    print("Comme vous √™tes jeune !")
else:
    print("Comme vous √™tes vieux !")
```
Ici nous utilisons la fonction `int` car nous supposons que l'utilisateur entrera un nombre entier.
Cependant le programme fonctionnerait de la m√™me mani√®re en utilisant la fonction `float`.
````
`````

```{admonition} Exercice
:class: note
Ecrivez la fonction maximum(a, b) qui prend 2 nombres en argument et retourne le plus grand.
```

`````{admonition} Solution
:class: hint
````{dropdown} <span style="color:grey">Cliquer ici pour voir la r√©ponse</span>
:animate: fade-in-slide-down
```{codeplay}
:file: au_revoir.py
def maximum(a, b):
    if a > b:
        return a
    else:
        return b

print(maximum(3, 4)) # Affiche 4
```
Cette fonction ne permet de comparer que 2 nombres mais nous verrons plus tard comment trouver le maximum dans une liste avec beaucoup de nombres üòâ
````
`````

Le bloc `elif` peut √™tre ajout√© apr√®s le bloc `if` pour **tester des conditions suppl√©mentaires**.
Notez que `elif` est la contraction de *else if* (sinon si, en fran√ßais).
L'exemple suivant d√©montre son utilit√© quand on a 4 situations possibles:

```{codeplay}
il_est_tard = False
je_suis_fatigue = False

if il_est_tard and je_suis_fatigue:
	print("Je vais dormir")
elif il_est_tard and not je_suis_fatigue:
	print("Je joue √† la console")
elif not il_est_tard and je_suis_fatigue:
	print("Je fais une sieste")
else:
	# Il ne reste plus qu'une seule possibilit√©
	print("Je vais courir dehors")
```

````{admonition} Exercice
:class: note
Ecrivez un programme qui demande √† l'utilisateur d'entrer les buts de l'√©quipe domicile et de l'√©quipe ext√©rieur.
Le programme affiche ensuite quelle √©quipe a gagn√© le match (ou match nul en cas d'√©galit√©).
**Exemples d‚Äôex√©cution :**
```
Buts marqu√©s par l'√©quipe domicile : 1
Buts marqu√©s par l'√©quipe ext√©rieur : 2
L'√©quipe ext√©rieur a gagn√© !!

Buts marqu√©s par l'√©quipe domicile : 0
Buts marqu√©s par l'√©quipe ext√©rieur : 0
Match nul !
```
````

`````{admonition} Solution
:class: hint
````{dropdown} <span style="color:grey">Cliquer ici pour voir la r√©ponse</span>
:animate: fade-in-slide-down
```{codeplay}
:file: au_revoir.py
buts_domicile = int(input("Buts marqu√©s par l'√©quipe domicile: "))
buts_exterieur = int(input("Buts marqu√©s par l'√©quipe ext√©rieur: "))

if buts_domicile > buts_exterieur:
    print("L'√©quipe domicile a gagn√© !!")
elif buts_exterieur > buts_domicile:
    print("L'√©quipe ext√©rieur a gagn√© !!")
else:
    print("Match nul !")
```
````
`````

## L'instruction while

L‚Äôinstruction `while` (qui signifie "tant que" en anglais) permet de **r√©p√©ter un bloc d‚Äôinstructions tant qu‚Äôune condition est remplie**.   
C'est extr√™mement pratique pour r√©duire le nombre de lignes de code üòú

```{codeplay}
a = 1
while a < 100:
	print(a)
	a = a*2
print(f"Maintenant a vaut {a} !")
```

Dans cet exemple, on initialise la variable `a` √† 1.
Puis, tant qu‚Äôelle est inf√©rieure √† 100, on l‚Äôaffiche √† l‚Äô√©cran et on la double. 
Ainsi, `a` passera de 1 √† 2 √† 4 √† 8, etc. 
**Le programme imprime donc toute les puissances de deux inf√©rieures √† 100**.

```{admonition} Exercice
:class: note
Modifier le programme ci-dessus pour qu‚Äôil imprime toutes les puissances de 10 inf√©rieures ou √©gales √† 10000.
```

`````{admonition} Solution
:class: hint
````{dropdown} <span style="color:grey">Cliquer ici pour voir la r√©ponse</span>
:animate: fade-in-slide-down
```{codeplay}
:file: au_revoir.py
a = 10
while a <= 10000:
    print(a)
    a = a*10
print(f"Maintenant a vaut {a} !")
```
Il est tout √† fait possible d'arriver au m√™me r√©sultat en calculant la puissance de 10 √† chaque tour de boucle en utilisant l'op√©rateur de puissance: `**`.
Voici un exemple:
```{codeplay}
a = 10
n = 1
while n <= 4:
    print(a**n)
    n = n + 1
```
````
`````

````{admonition} Exercice
:class: note
Ecrivez un programme qui demande en boucle √† l'utilisateur comment il va tant qu'il ne r√©pond pas "Bien merci et toi ?".  
Rappel: la fonction `input` permet de demander √† l'utilisateur d'entrer du texte.

**Exemple d‚Äôex√©cution :**
```
Comment tu vas ? Bien
Comment tu vas ? Bof
Comment tu vas ? Nickel !
Comment tu vas ? Bien merci et toi ?
Tr√®s bien, merci de demander !
```
````

`````{admonition} Solution
:class: hint
````{dropdown} <span style="color:grey">Cliquer ici pour voir la r√©ponse</span>
:animate: fade-in-slide-down
```{codeplay}
:file: au_revoir.py
reponse = input("Comment tu vas ? ")

while reponse != "Bien merci et toi ?":
    reponse = input("Comment tu vas ? ")

print("Tr√®s bien, merci de demander !")
```
‚ö†Ô∏è Notez que Python est sensible √† la casse (majuscule/minuscule) ‚ö†Ô∏è  
Cela signifie que "Salut" et "salut" ne sont pas √©gaux lors d'une comparaison (`==`).
````
`````

## Le module random

Le module `random` contient plein de fonctions permettant **d'ajouter de l'al√©atoire √† nos programmes**.  
Par exmple, la fonction `randint(min, max)` du module `random` permet de **tirer un nombre entier al√©atoire** entre `min` et `max` (compris).

Voici un exemple o√π le programme tire un nombre al√©atoire entre 1 et 100.

```{codeplay}
import random

n = random.randint(1, 100)
print(n)
```

Il est aussi possible d'afficher des objets de taille al√©atoire √† des emplacements al√©atoires.

```{codeplay}
from turtle import *
from random import *
up()

i = 0
while i < 10:
    x = randint(-250, 250)  # Position al√©atoire sur l'axe x
    y = randint(-150, 150)  # Position al√©atoire sur l'axe y
    d = randint(1, 5)  # Diam√®tre al√©atoire entre 1 et 5
    goto(x, y)
    dot(d*10, 'cyan')
    write(d, align='center')
    i = i + 1
```

```{question}
En Python, `random` est

{v}`un module`  
{f}`une condition`  
{f}`une variable al√©atoire`  
{f}`un mot-cl√©`
```

````{admonition} Exercice 20 - Devine mon nombre !
:class: note
Ecrivez un programme qui permet de jouer √† "Devine mon nombre":
1. Laissez le programme tirer un nombre al√©atoire entre 1 et 50.
2. Demandez √† l'utilisateur de proposer un nombre tant qu'il n'a pas trouv√© le bon.
3. A chaque proposition de nombre, le programme affiche "Plus grand" ou "Plus petit" pour aider le joueur.
4. Ajoutez un compteur de coups n√©cessaires pour trouver le bon nombre.

**Exemple d‚Äôex√©cution :**
```
Devine mon nombre: 32
Plus grand
Devine mon nombre: 43
Plus petit
...
Devine mon nombre: 38
Gagn√© ! (Il vous a fallu 6 coups)
```

```{codeplay}
:file: ex_20.py
import random

nombre_mystere = ...
nombre_propose = ...
coups = 1
while ...:
    if ...:
        print('Plus petit')
    else:
        print('Plus grand')
    ...
print(f'Gagn√© ! (Il vous a fallu {coups} coups)')
```
````

<!-- `````{admonition} Solution
:class: hint
````{dropdown} <span style="color:grey">Cliquer ici pour voir la r√©ponse</span>
:animate: fade-in-slide-down
```{codeplay}
:file: ex_20.py
import random

nombre_mystere = random.randint(1, 50)
nombre_propose = int(input('Devine mon nombre: '))
coups = 1
while nombre_propose != nombre_mystere:
    if nombre_propose > nombre_mystere:
        print('Plus petit')
    else:
        print('Plus grand')
    nombre_propose = int(input('Devine mon nombre: '))
    coups = coups + 1
print(f'Gagn√© ! (Il vous a fallu {coups} coups)')
```
````
````` -->
