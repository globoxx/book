(prog1.definitions)=

# D√©finition de fonctions

[M√©mento Python](https://perso.limsi.fr/pointal/_media/python:cours:mementopython3.pdf)  
[Raccourcis clavier](https://support.apple.com/fr-ch/HT201236)

## D√©finir ses propres fonctions

Il est souvent utile d‚Äô√©crire ses propres fonctions, **afin de ne pas avoir √† √©crire plusieurs fois le m√™me bout de code**üôè  
En programmation, le concept de fonction n‚Äôest pas exactement le m√™me qu‚Äôen math√©matiques.
Il faut plut√¥t le voir comme un **sous-programme auquel on fournit des objets et qui peut en retourner d‚Äôautres**.

Pour d√©finir une fonction, il faut indiquer les √©l√©ments suivants :

1. Le mot-cl√© `def` suivi du nom de la fonction puis de deux points (:).
2. Les **arguments**, ou param√®tres, qui indiquent quels sont **les objets √† fournir** √† la fonction pour que le programme puisse l‚Äôex√©cuter. Certaines fonctions ne prennent aucun argument.
3. La liste des instructions de la fonction, autrement dit, le sous-programme effectu√© par la fonction. La liste des instructions est indent√©e par rapport au programme principal, c‚Äôest-√†-dire qu‚Äôelle est **d√©cal√©e √† droite**. Une liste d‚Äôinstruction est aussi appel√©e un **bloc d‚Äôinstruction**.
4. Dans le cas o√π la fonction retourne un r√©sultat, il est n√©cessaire d‚Äôutiliser le mot-cl√© `return` suivi de l‚Äôobjet √† retourner.

Ces quatre √©l√©ments constituent la d√©finition de la fonction.
**Une fois une fonction ainsi d√©finie, on peut l‚Äôutiliser (l‚Äôappeler) autant de fois que l‚Äôon d√©sire dans un programme** ü§©

Voici la syntaxe g√©n√©rale pour d√©finir une fonction :

```python
def nom_de_votre_fonction(argument1, argument2, ...):
	...
	# bloc d'instruction
	...
	# return resultat (optionnel)

nom_de_votre_fonction(arg1, arg2, ...)  # Appel de la fonction
```

‚ö†Ô∏è Rappelez-vous de ceci ‚ö†Ô∏è :

1. On d√©finit une fonction qu‚Äôune seule fois.
2. On appelle une fonction autant de fois que l‚Äôon veut.
3. Si on ne l‚Äôappelle pas, la fonction n‚Äôest pas ex√©cut√©e.

```{codeplay}
def au_cube(n):
	cube = n**3
	return cube
	
a = au_cube(2)
b = au_cube(5)
print(f"Les cubes de 2 et 5 sont {a} et {b}")
```

L‚Äôexemple ci-dessus montre la d√©finition d‚Äôune fonction nomm√©e `au_cube` prenant 1 argument et retournant le cube de cet argument.

```{admonition} Exercice
:class: note
Ecrivez une fonction `au_carre(n)` qui calcule le carr√© d‚Äôun nombre et le retourne.  
Utilisez cette fonction pour calculer et afficher le carr√© des nombres 6, -5 et 573.28.
```

`````{admonition} Solution
:class: hint
````{dropdown} <span style="color:grey">Cliquer ici pour voir la r√©ponse</span>
:animate: fade-in-slide-down
```{codeplay}
:file: au_revoir.py
def au_carre(n):
    carre = n**2
    return carre

a = au_carre(6)
b = au_carre(-5)
c = au_carre(573.28)

print(f"Les carr√©s de 6, -5 et 573.28 sont {a}, {b} et {c}")
```
Evidemment, cette fonction n'est pas tr√®s utile car elle reproduit simplement l'op√©ration `n**2`üòÖ
````
`````

L‚Äôexemple suivant montre la d√©finition d‚Äôune fonction qui ne **retourne aucune valeur**: la fonction ne se termine pas par le mot-cl√© `return`. 
La fonction s‚Äôex√©cute (ici elle affiche des choses) mais ne retourne rien.

```{codeplay}
def saluer(prenom, nom):
	print(f"Bonjour {prenom} {nom}")
	print("Bienvenue !")

saluer("Pierre", "Schmutz")
```

Notez que les arguments doivent √™tre donn√©s **dans le m√™me ordre que dans la d√©finition** de la fonction afin que le programme sache quelle entr√©e correspond √† quel argument.

```{admonition} Exercice
:class: note
Modifiez l‚Äôexemple ci-dessus pour ajouter un troisi√®me argument de votre choix √† la fonction `saluer()`.  
Faites en sorte que la fonction utilise ce nouvel argument dans son message de bienvenue puis appelez la fonction.
```

`````{admonition} Solution
:class: hint
````{dropdown} <span style="color:grey">Cliquer ici pour voir la r√©ponse</span>
:animate: fade-in-slide-down
```{codeplay}
:file: au_revoir.py
def saluer(prenom, nom, age):
    print(f"Bonjour {prenom} {nom} qui a {age} ans !")
    print("Bienvenue !")

saluer("Pierre", "Schmutz", 34)
```
````
`````

```{codeplay}
def volume_cylindre(rayon, hauteur):
	vol = 3.14 * rayon**2 * hauteur
	return vol

v1 = volume_cylindre(2.3, 10)
v2 = volume_cylindre(1.2, 5)
print(f"Le volume des cylindres est de {v1} et {v2}")
```

L‚Äôexemple ci-dessus montre une fonction prenant en arguments le rayon et la hauteur d‚Äôun cylindre afin d‚Äôen retourner le volume ü§ì

````{admonition} Exercice
:class: note
L‚Äôindice de masse corporelle (IMC) d‚Äôune personne est donn√© par son poids (en kg) divis√© par le carr√© de sa taille (en m√®tres).
Ecrivez une fonction qui prend le poids et la taille en argument et retourne l‚ÄôIMC.  
Utilisez cette fonction dans un programme qui demande son poids et sa taille √† l‚Äôutilisateur et affiche son IMC dans le terminal.  

**Exemple d‚Äôex√©cution :**
```
Entrez votre poids (kg) : 84
Entrez votre taille (m) : 1.84
Votre IMC est de 24.810964083175
```
L'IMC n'est q'un indicateur et ne permet absolument pas, √† lui seul, de d√©terminer l'√©tat de sant√© d'une personne.
````

`````{admonition} Solution
:class: hint
````{dropdown} <span style="color:grey">Cliquer ici pour voir la r√©ponse</span>
:animate: fade-in-slide-down
```{codeplay}
:file: au_revoir.py
def calcule_imc(poids, taille):
    imc = poids / taille**2
    return imc

poids = float(input("Entrez votre poids (kg): "))
taille = float(input("Entrez votre taille (m): "))
imc = calcule_imc(poids, taille)

print(f"Votre IMC est de {imc}")
```
Gardez √† l'esprit qu'une fois que vous avez choisi un nom pour une fonction ou une variable, vous ne pouvez pas utiliser ce nom pour une autre fonction ou variable.
````
`````

## Exercices Turtle üê¢ (facultatif)

````{admonition} Exercice
:class: note
Il est temps d‚Äôam√©liorer notre code permettant de dessiner une maison gr√¢ce aux fonctions ! ü§©
1. Ecrivez une fonction `carre(taille)` qui dessine un carr√© de la taille pass√©e en argument.
2. Ecrivez une fonction `triangle(taille)` qui dessine un triangle √©quilat√©ral avec la taille pass√©e en argument.
3. Enfin, √©crivez une fonction `maison(taille)` qui appelle les 2 fonctions pr√©c√©dentes pour dessiner une maison de la taille pass√©e en argument.
````

`````{admonition} Solution
:class: hint
````{dropdown} <span style="color:grey">Cliquer ici pour voir la r√©ponse</span>
:animate: fade-in-slide-down
```{codeplay}
:file: au_revoir.py
import turtle # Importe le module

# Fonction qui dessine un carr√© de taille d
def dessine_carre(d):
    turtle.forward(d) # Avance de 100 pixels
    turtle.left(90) # Tourne a gauche de 90 degres
    turtle.forward(d)
    turtle.left(90)
    turtle.forward(d)
    turtle.left(90)
    turtle.forward(d)
    turtle.left(90)

# Fonction qui dessine un triangle de taille d
def dessine_triangle(d):
    turtle.forward(d) # Avance de 100 pixels
    turtle.left(120) # Tourne a gauche de 120 degres (180-60)
    turtle.forward(d)
    turtle.left(120)
    turtle.forward(d)
    turtle.left(120)

# Fonction qui dessine une maison de taille d
def dessine_maison(d):
    # On dessine le carr√©
    dessine_carre(d)

    # On se d√©place au sommet du carr√©
    turtle.left(90)
    turtle.forward(d)
    turtle.right(90)

    # On dessine le triangle
    dessine_triangle(d)

d = int(input("Entrez la taille de la maison: ")) # On demande √† l'utilisateur la taille de la maison

# On dessine la maison de taille d
dessine_maison(d)

# Il est ensuite tr√®s facile de dessiner d'autres maisons de tailles variables
turtle.up() # Permet de lever le stylo
turtle.goto(125, 125) # Se d√©place √† ces coordonn√©es
turtle.down() # Permet de recommencer √† dessiner
dessine_maison(d/2)

turtle.up()
turtle.goto(-250, -250)
turtle.down()
dessine_maison(d*2)

turtle.done() # Termine le dessin
```
````
`````
