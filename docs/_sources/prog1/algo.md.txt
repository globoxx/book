(prog1.algo)=

# 7. Les algorithmes

<a href="https://perso.limsi.fr/pointal/_media/python:cours:mementopython3.pdf" target="_blank">M√©mento Python</a>  
<a href="https://support.apple.com/fr-ch/HT201236" target="_blank">Raccourcis clavier</a>

Dans ce chapitre, nous allons d√©couvrir quelques algorithmes r√©currents en informatique. Nous allons surtout nous pencher sur le tri qui est une fonctionnalit√© fondamentale. **L'√©norme succ√®s de Google est bas√© sur un tri efficace de l‚Äôinformation**, car dans une liste tri√©e, on peut retrouver un √©l√©ment beaucoup plus vite.  

Lorsque vous jouez aux cartes, vous triez vos cartes par valeur et dans ce cas, vous utilisez sans le savoir un algorithme de tri.

```{image} media/cartes.webp
:width: 300px
```

Nous allons voir que‚ÄØ:

- la fonction `min(liste)` retourne le minimum de la liste en argument,
- la fonction `max(liste)` retourne le maximum de la liste en argument,
- la fontion `sorted(liste)` trie la liste en argument dans l'ordre croissant.

Pour visualiser les listes de nombres, nous allons utiliser le module `turtle` pour dessiner des points representant chaque nombre.  
**La hauteur du point repr√©sente sa valeur**.

```{codeplay}
from turtle import *
from random import *

def create(size):
    getscreen().bgcolor('skyblue')
    d = 600/size
    x0 = 300 - d//2
    y0 = 200 - d//2
    turtles = [Turtle() for _ in range(size)]
    for i, t in enumerate(turtles):
        t.speed(50)
        t.penup()
        t.goto(-x0 + i*d, randint(-y0, y0))
        t.pendown()
        t.color('blue')
        t.shape('circle')
        #t.shapesize(d/20, d/20, 1)
    return turtles
===
longueur_liste = 20
liste = create(longueur_liste)  # La fonction create (dont la d√©finition est cach√©e) permet de cr√©er une liste al√©atoire de points
done()
```

## Fonctions min et max

Les fonctions `min()` et `max()` retournent le minimum et le maximum d'une liste √† l'aide d'un algorithme.  

```{codeplay}
liste = [3, 4, 1, 2, 6, 5]

print(min(liste))
print(max(liste))
```

Mais comment fonctionne ces algorithmes‚ÄØ?

Ces fonctions sont tr√®s utiles et nous allons voir comment les √©crire nous-m√™mes !
Pour trouver le minimum dans une liste, une mani√®re courante de faire est de:

- initialiser une variable `minimum` avec une tr√®s grande valeur (infini),
- parcourir la liste de nombres,
- mettre √† jour `minimum` √† chaque fois que l'on trouve un nombre plus petit.

```{codeplay}
def calcule_min(liste):
    minimum = float('inf')  # Plus grand nombre possible (infini)
    for valeur in liste:
        if valeur < minimum:
            minimum = valeur
    return minimum

liste = [3, 4, 1, 2, 6, 5]
minimum = calcule_min(liste)  
print(f'Le minimum est {minimum}')
```

Le maximum peut √™tre trouv√© de mani√®re similaire, **en mettant √† jour le plus grand nombre trouv√©**.  
Voici une visualisation des algorithmes `min()` et `max()` o√π les points rouges repr√©sentent les plus petites et plus grandes valeurs trouv√©es dans la liste:

```{codeplay}
from turtle import *
from random import *

def create(size):
    getscreen().bgcolor('skyblue')
    d = 600/size
    x0 = 300 - d//2
    y0 = 200 - d//2
    turtles = [Turtle() for _ in range(size)]
    for i, t in enumerate(turtles):
        t.speed(50)
        t.penup()
        t.goto(-x0 + i*d, randint(-y0, y0))
        t.pendown()
        t.color('blue')
        t.shape('circle')
        #t.shapesize(d/20, d/20, 1)
    return turtles

def dessine_min_max(points):
    t_min = Turtle()
    t_max = Turtle()
    t_min.hideturtle()
    t_max.hideturtle()
    t_min.up()
    t_max.up()
    t_min.color('red')
    t_max.color('red')
    d = 600/len(points)
    for i in range(len(points)):
        if i == 0:
            min = points[i].ycor()
            max = points[i].ycor()
        else:
            t_min.down()
            t_max.down()
            if points[i].ycor() < min:
                min = points[i].ycor()
            if points[i].ycor() > max:
                max = points[i].ycor()
        t_min.goto(points[i].xcor(), min)
        t_min.dot(d/2)
        t_max.goto(points[i].xcor(), max)
        t_max.dot(d/2)
===
longueur_liste = 20
liste = create(longueur_liste)

dessine_min_max(liste)

done()
```

````{admonition} Exercice 25 - Max (moyen ü§ì)
:class: note
Ecrivez la fonction `calcule_max(liste)` qui retourne la valeur maximum d'une liste.

```{codeplay}
:file: ex_25.py
def calcule_min(liste):
    minimum = float('inf')
    for valeur in liste:
        if valeur < minimum:
            minimum = valeur
    return minimum

def calcule_max(liste):
    ...

liste = [3, 4, 1, 2, 6, 5]
minimum = calcule_min(liste)  
print(f'Le minimum est {minimum}')
maximum = ...
print(f'Le maximum est {maximum}')
```
````

## L'index du minimum/maximum

Souvent, on ne doit pas seulement trouver la valeur minimum, **mais aussi sa position** (son index) dans la liste afin de pouvoir √©ventuellement le d√©placer dans la liste.  
Contrairement au cas pr√©c√©dent, ici nous ne parcourons pas les valeurs, mais les index gr√¢ce √† une `range`.

```{codeplay}
liste = [3, 4, 1, 2, 6, 5]

minimum = float('inf')
index_minimum = 0

n = len(liste)
for i in range(n):
    if liste[i] < minimum:
        minimum = liste[i]
        index_minimum = i
        
print(f"Le minimum est {minimum} et se trouve √† l'index {index_minimum}")
```

````{admonition} Exercice 26 - Indice max (moyen ü§ì)
:class: note
Modifier l'exemple pr√©c√©dent pour **en plus** afficher le maximum et son index.

```{codeplay}
:file: ex_26.py
liste = [3, 4, 1, 2, 6, 5]

minimum = float('inf')
index_minimum = 0

n = len(liste)
for i in range(n):
    if liste[i] < minimum:
        minimum = liste[i]
        index_minimum = i
        
print(f"Le minimum est {minimum} et se trouve √† l'index {index_minimum}")
print(f"Le maximum est {maximum} et se trouve √† l'index {index_maximum}")
```
````

## Algorithmes de tri

La fonction `sorted(liste)` **trie une liste dans l'ordre croissant**. Cela fonctionne tant que la liste contient des √©l√©ments qui ont une relation d'ordre.  
Par exemple, une liste de textes sera tri√©e alphab√©tiquement.

```{codeplay}
liste = [3, 4, 1, 2, 6, 5]
liste_triee = sorted(liste)
print(liste_triee)

liste = ['banane', 'carotte', 'ananas', 'courgette', 'pomme']
liste_triee = sorted(liste)
print(liste_triee)
```

La fonction `sorted()` de python est bas√©e sur l'algorithme <a href="https://fr.wikipedia.org/wiki/Timsort#:~:text=Timsort%20est%20un%20algorithme%20de,le%20langage%20de%20programmation%20Python." target="_blank">Timsort</a> qui est plus efficace et complexe que ceux que nous allons voir ensemble.

### √âchanger deux √©l√©ments

Pour √©changer deux √©l√©ments d'une liste, nous pouvons utiliser une variable temporaire pour stocker une valeur.  
Ici nous √©changeons les deux premiers √©l√©ments, donc les √©l√©ments avec les index 0 et 1.

```{codeplay}
liste = [3, 4, 1, 2, 6, 5]
print(liste)

tmp = liste[0]  # On stocke la valeur de liste[0] car elle sera √©cras√©e par liste[1] et donc perdue autrement
liste[0] = liste[1]
liste[1] = tmp

print(liste)
```

Le programme devient plus lisible si nous d√©finissons une fonction `echange()` qui s'en occupe.

```{codeplay}
liste = [3, 4, 1, 2, 6, 5]
print(liste)

def echange(liste, i, j):
    tmp = liste[i]
    liste[i] = liste[j]
    liste[j] = tmp

echange(liste, 0, 1)  # Echange de l'√©l√©ment √† l'index 0 avec celui √† l'index 1
print(liste)
```

`````{admonition} Pour aller plus loin
:class: hint
````{dropdown} <span style="color:grey">Les affectations multiples</span>
:animate: fade-in-slide-down
Il est √©galement possible d'√©changer la valeur de 2 variables en utilisant une **affectation multiple**.
```python
def echange(liste, i, j):
    liste[i], liste[j] = liste[j], liste[i]
```
````
`````

Voici un exemple permettant de visualiser l'√©change de valeurs dans une liste.

```{codeplay}
from turtle import *
from random import *

def echange_elem(liste, i, j):
    liste[i], liste[j] = liste[j], liste[i]

def create(size):
    getscreen().bgcolor('skyblue')
    d = 600/size
    x0 = 300 - d//2
    y0 = 200 - d//2
    turtles = [Turtle() for _ in range(size)]
    for i, t in enumerate(turtles):
        t.speed(50)
        t.penup()
        t.goto(-x0 + i*d, randint(-y0, y0))
        t.pendown()
        t.color('blue')
        t.shape('circle')
        #t.shapesize(d/20, d/20, 1)
    return turtles

def move_simu(turtles, coordinates, nhops=10):
    deltas = []
    for t, coord in zip(turtles, coordinates):
        current_coord = (t.xcor(), t.ycor())
        diff = (coord[0]-current_coord[0], coord[1]-current_coord[1])
        delta = (diff[0] * (1.0/nhops), diff[1] * (1.0/nhops))
        deltas.append(delta)
    for _ in range(1, nhops+1):
        for t, delta in zip(turtles, deltas):
            t.goto(t.xcor() + delta[0], t.ycor() + delta[1])
    
def echange(turtles, i, j):
    turtles_to_move = [turtles[i], turtles[j]]
    coordinates = [(turtles[j].xcor(), turtles[i].ycor()), (turtles[i].xcor(), turtles[j].ycor())]
    turtles[i].color('green')
    turtles[j].color('green')
    move_simu(turtles_to_move, coordinates)
    turtles[i].color('black')
    turtles[j].color('black')
    echange_elem(turtles, i, j)
===
import random
longueur_liste = 20
liste = create(longueur_liste)

echange(liste, 0, 1)  # Echange le 1er point avec le 2√®me
echange(liste, 1, 2)  # Echange le 2√®me point avec le 3√®me
echange(liste, 2, 0)  # Echange le 3√®me point avec le 1er
echange(liste, 0, longueur_liste-1)  # Echange le 1er point avec le dernier

done()
```

````{admonition} Exercice 27 - Echanges (moyen ü§ì)
:class: note
Visualisons un peu plus ces √©changes.
1. Utilisez une boucle `for` et la fonction `echange(liste, i, j)` pour echanger chaque point avec son voisin. Cela devrait faire remonter le 1er √©l√©ment de la liste vers la fin de la liste.
2. Utilisez une boucle `for` et la fonction `echange(liste, i, j)` pour √©changer 5 points al√©atoirement.

Rappel: la fonction `randint(a, b)` du module `random` permet de tirer un nombre entier al√©atoire entre `a` et `b`.

```{codeplay}
:file: ex_27.py
from turtle import *
from random import *

def echange_elem(liste, i, j):
    liste[i], liste[j] = liste[j], liste[i]

def create(size):
    getscreen().bgcolor('skyblue')
    d = 600/size
    x0 = 300 - d//2
    y0 = 200 - d//2
    turtles = [Turtle() for _ in range(size)]
    for i, t in enumerate(turtles):
        t.speed(50)
        t.penup()
        t.goto(-x0 + i*d, randint(-y0, y0))
        t.pendown()
        t.color('blue')
        t.shape('circle')
        #t.shapesize(d/20, d/20, 1)
    return turtles

def move_simu(turtles, coordinates, nhops=10):
    deltas = []
    for t, coord in zip(turtles, coordinates):
        current_coord = (t.xcor(), t.ycor())
        diff = (coord[0]-current_coord[0], coord[1]-current_coord[1])
        delta = (diff[0] * (1.0/nhops), diff[1] * (1.0/nhops))
        deltas.append(delta)
    for _ in range(1, nhops+1):
        for t, delta in zip(turtles, deltas):
            t.goto(t.xcor() + delta[0], t.ycor() + delta[1])
    
def echange(turtles, i, j):
    turtles_to_move = [turtles[i], turtles[j]]
    coordinates = [(turtles[j].xcor(), turtles[i].ycor()), (turtles[i].xcor(), turtles[j].ycor())]
    turtles[i].color('green')
    turtles[j].color('green')
    move_simu(turtles_to_move, coordinates)
    turtles[i].color('black')
    turtles[j].color('black')
    echange_elem(turtles, i, j)
===
import random
longueur_liste = 20
liste = create(longueur_liste)

...

done()
```
````

Les echanges sont √† la base des algorithmes de tri que nous voyons dans ce cours.
Il s'agit des 3 algorithmes les plus simples:

- Le tri √† bulles
- Le tri par insertion
- Le tri par s√©lection

```{admonition} Important
:class: attention
Les algorithmes suivants sont **√† comprendre** (leur fonctionnement et leurs diff√©rences). Vous devez √™tre capable de lire leur code **mais pas de l'√©crire vous-m√™me**.
```

### Tri √† bulles

L‚Äôalgorithme du **tri √† bulles** compare les √©l√©ments voisins, deux par deux, et les met dans le bon ordre si n√©cessaire. Il recommence ensuite au d√©but de la liste jusqu'√† ce que toute la liste soit tri√©e.

Le mot 'bulles' fait r√©f√©rence aux bulles dans une boisson qui montent √† la surface exactement comme les grands √©l√©ments remontent progressivement vers la fin de la liste.

```{image} media/tri_a_bulles.gif
```

```{codeplay}
def echange(liste, i, j):
    liste[i], liste[j] = liste[j], liste[i]
===
def bubble_sort(liste):
    N = len(liste)
    for iteration in range(N - 1):
        for i in range(N - 1):
            if liste[i] > liste[i+1]:
                echange(liste, i, i+1)
                print(liste)
    return liste

liste = [3, 4, 1, 2, 6, 5]
print(liste)
liste = bubble_sort(liste)
print(liste)
```

Visualisons l'algorithme:

```{codeplay}
from turtle import *
from random import *

def echange_elem(liste, i, j):
    liste[i], liste[j] = liste[j], liste[i]

def create(size):
    getscreen().bgcolor('skyblue')
    d = 600/size
    x0 = 300 - d//2
    y0 = 200 - d//2
    turtles = [Turtle() for _ in range(size)]
    for i, t in enumerate(turtles):
        t.speed(50)
        t.penup()
        t.goto(-x0 + i*d, randint(-y0, y0))
        t.pendown()
        t.color('blue')
        t.shape('circle')
        #t.shapesize(d/20, d/20, 1)
    return turtles
    
def move_simu(turtles, coordinates, nhops=10):
    deltas = []
    for t, coord in zip(turtles, coordinates):
        current_coord = (t.xcor(), t.ycor())
        diff = (coord[0]-current_coord[0], coord[1]-current_coord[1])
        delta = (diff[0] * (1.0/nhops), diff[1] * (1.0/nhops))
        deltas.append(delta)
    for _ in range(1, nhops+1):
        for t, delta in zip(turtles, deltas):
            t.goto(t.xcor() + delta[0], t.ycor() + delta[1])
    
def echange(turtles, i, j):
    turtles_to_move = [turtles[i], turtles[j]]
    coordinates = [(turtles[j].xcor(), turtles[i].ycor()), (turtles[i].xcor(), turtles[j].ycor())]
    turtles[i].color('green')
    turtles[j].color('green')
    move_simu(turtles_to_move, coordinates)
    turtles[i].color('black')
    turtles[j].color('black')
    echange_elem(turtles, i, j)
===
def bubble_sort(liste):
    N = len(liste)
    for iteration in range(N - 1):
        for i in range(N - 1):
            if liste[i].ycor() > liste[i+1].ycor():  # ycor() est une m√©thode permettant de r√©cup√©rer la hauteur du point (coordonn√©e y)
                echange(liste, i, i+1)
    return liste

longueur_liste = 20
liste = create(longueur_liste)

liste = bubble_sort(liste)

done()
```

### Tri par insertion

L‚Äôalgorithme du **tri par insertion** est utilis√© instinctivement par la plupart des gens pour trier des cartes √† jouer.  
Il parcourt la liste d‚Äô√©l√©ments √† trier du 2√®me au dernier √©l√©ment.
Pour chaque √©l√©ment consid√©r√©, il l‚Äôins√®re √† l‚Äôemplacement correct √† gauche dans la liste d√©j√† parcourue en redescendant l'index.

```{image} media/tri_par_insertion.gif
```

```{codeplay}
def echange(liste, i, j):
    liste[i], liste[j] = liste[j], liste[i]
===
def insertion_sort(liste):
    N = len(liste)
    for i in range(2, N):
        for j in range(i, 0, -1):
            if liste[j] < liste[j-1]:
                echange(liste, j, j-1)
                print(liste)
    return liste

liste = [3, 4, 1, 2, 6, 5]
print(liste)
liste = insertion_sort(liste)
print(liste)
```

```{codeplay}
from turtle import *
from random import *

def echange_elem(liste, i, j):
    liste[i], liste[j] = liste[j], liste[i]

def create(size):
    getscreen().bgcolor('skyblue')
    d = 600/size
    x0 = 300 - d//2
    y0 = 200 - d//2
    turtles = [Turtle() for _ in range(size)]
    for i, t in enumerate(turtles):
        t.speed(50)
        t.penup()
        t.goto(-x0 + i*d, randint(-y0, y0))
        t.pendown()
        t.color('blue')
        t.shape('circle')
        #t.shapesize(d/20, d/20, 1)
    return turtles
    
def move_simu(turtles, coordinates, nhops=10):
    deltas = []
    for t, coord in zip(turtles, coordinates):
        current_coord = (t.xcor(), t.ycor())
        diff = (coord[0]-current_coord[0], coord[1]-current_coord[1])
        delta = (diff[0] * (1.0/nhops), diff[1] * (1.0/nhops))
        deltas.append(delta)
    for _ in range(1, nhops+1):
        for t, delta in zip(turtles, deltas):
            t.goto(t.xcor() + delta[0], t.ycor() + delta[1])
    
def echange(turtles, i, j):
    turtles_to_move = [turtles[i], turtles[j]]
    coordinates = [(turtles[j].xcor(), turtles[i].ycor()), (turtles[i].xcor(), turtles[j].ycor())]
    turtles[i].color('green')
    turtles[j].color('green')
    move_simu(turtles_to_move, coordinates)
    turtles[i].color('black')
    turtles[j].color('black')
    echange_elem(turtles, i, j)
===
def insertion_sort(liste):
    N = len(liste)
    for i in range(2, N):
        for j in range(i, 0, -1):
            if liste[j].ycor() < liste[j-1].ycor():
                echange(liste, j, j-1)
    return liste

longueur_liste = 20
liste = create(longueur_liste)

liste = insertion_sort(liste)

done()
```

### Tri par s√©lection

L‚Äôalgorithme du **tri par s√©lection** commence par rechercher le plus petit √©l√©ment de la liste et l‚Äô√©change avec le 1er √©l√©ment de la liste.  
Il recherche ensuite le plus petit √©l√©ment de la liste restante. Il s√©lectionne ainsi le 2√®me plus petit √©l√©ment de la liste et l‚Äô√©change avec le 2√®me √©l√©ment de la liste.  
Et ainsi de suite...

Pour r√©sumer, il met le plus petit √©l√©ment en 1√®re position (index 0), puis le 2√®me plus petit √©l√©ment √† la 2√®me position (index 1), puis le 3√®me plus petit √©l√©ment √† la 3√®me position (index 2), etc...

```{image} media/tri_par_selection.gif
```

```{codeplay}
def echange(liste, i, j):
    liste[i], liste[j] = liste[j], liste[i]
===
def selection_sort(liste):
    N = len(liste)
    for i in range(N-1):
        index_minimum = i
        minimum = liste[i]
        for j in range(i+1, N):
            if liste[j] < minimum:
                index_minimum = j
                minimum = liste[j]
        echange(liste, i, index_minimum)
        print(liste)
    return liste

liste = [3, 4, 1, 2, 6, 5]
print(liste)
liste = selection_sort(liste)
print(liste)
```

```{codeplay}
from turtle import *
from random import *

def echange_elem(liste, i, j):
    liste[i], liste[j] = liste[j], liste[i]

def create(size):
    getscreen().bgcolor('skyblue')
    d = 600/size
    x0 = 300 - d//2
    y0 = 200 - d//2
    turtles = [Turtle() for _ in range(size)]
    for i, t in enumerate(turtles):
        t.speed(50)
        t.penup()
        t.goto(-x0 + i*d, randint(-y0, y0))
        t.pendown()
        t.color('blue')
        t.shape('circle')
        #t.shapesize(d/20, d/20, 1)
    return turtles
    
def move_simu(turtles, coordinates, nhops=10):
    deltas = []
    for t, coord in zip(turtles, coordinates):
        current_coord = (t.xcor(), t.ycor())
        diff = (coord[0]-current_coord[0], coord[1]-current_coord[1])
        delta = (diff[0] * (1.0/nhops), diff[1] * (1.0/nhops))
        deltas.append(delta)
    for _ in range(1, nhops+1):
        for t, delta in zip(turtles, deltas):
            t.goto(t.xcor() + delta[0], t.ycor() + delta[1])
    
def echange(turtles, i, j):
    turtles_to_move = [turtles[i], turtles[j]]
    coordinates = [(turtles[j].xcor(), turtles[i].ycor()), (turtles[i].xcor(), turtles[j].ycor())]
    turtles[i].color('green')
    turtles[j].color('green')
    move_simu(turtles_to_move, coordinates)
    turtles[i].color('black')
    turtles[j].color('black')
    echange_elem(turtles, i, j)
===
def selection_sort(liste):
    N = len(liste)
    for i in range(N-1):
        index_minimum = i
        minimum = liste[i].ycor()
        for j in range(i+1, N):
            if liste[j].ycor() < minimum:
                index_minimum = j
                minimum = liste[j].ycor()
        echange(liste, i, index_minimum)
    return liste

longueur_liste = 20
liste = create(longueur_liste)

liste = selection_sort(liste)

done()
```

````{admonition} Exercice 28 - Am√©lioration (difficile ü§Ø)
:class: note
L'algorithme du tri par s√©lection peut √™tre simplif√© √† l'aide de la fonction `min()` et de la m√©thode `index()`.  
La m√©thode `liste.index(x)` retourne l'index de l'√©l√©ment `x` dans la liste.  

Tentez de simplifier l'√©criture de l'algorithme de tri par s√©lection.  
Indice: toute la boucle interne ne sert qu'√† une seule chose, trouver le minimum et son index. Elle peut donc √™tre r√©√©crite plus simplement avec `min()` et `liste.index()`.

```{codeplay}
def echange(liste, i, j):
    liste[i], liste[j] = liste[j], liste[i]
===
def selection_sort(liste):
    N = len(liste)
    for i in range(N-1):
        # Partie √† modifier ------------
        index_minimum = i
        minimum = liste[i]
        for j in range(i+1, N):
            if liste[j] < minimum:
                index_minimum = j
                minimum = liste[j]
        # ------------------------------
        echange(liste, i, index_minimum)
        print(liste)
    return liste

liste = [3, 4, 1, 2, 6, 5]
print(liste)
liste = selection_sort(liste)
print(liste)
```
````
